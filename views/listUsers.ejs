<%- include('partials/header') %>
  <div class="row mt-3">
    <div class="col">
      <div class="card">
        <div class="card-header">
          <h3 class="card-title my-1 text-center">MongoDB Breads (Browse, Read, Edit, Add, Delete, Sort)</h3>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-3 mb-3">
              <div class="input-group">
                <span class="input-group-text">Show</span>
                <select class="form-control text-center" id="limit">
                  <option value="5">5</option>
                  <option value="10">10</option>
                  <option value="0">All</option>
                </select>
                <span class="input-group-text">Entries</span>
              </div>
            </div>
            <div class="col-md-9 mb-3">
              <div class="input-group">
                <input type="text" class="form-control" id="search" placeholder="Search">
                <button class="btn btn-secondary" id="searchBtn"><i class="fa-solid fa-magnifying-glass"></i></button>
                <button class="btn btn-warning" id="resetBtn"><i class="fa-solid fa-rotate"></i></button>
              </div>
            </div>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col" class="col-1 align-middle px-2">No.</th>
                <th scope="col" class="col-4 col-md-3 align-middle px-2" id="sortName"><i
                    class="fa-solid fa-sort me-2"></i>Name</th>
                <th scope="col" class="col-4 col-md-3 align-middle px-2" id="sortPhone"><i
                    class="fa-solid fa-sort me-2"></i>Phone</th>
                <th scope="col" class="col-3 align-middle px-2">Actions</th>
              </tr>
            </thead>
            <tbody id="userTableBody">
              <!-- User rows will be inserted here -->
            </tbody>
          </table>
        </div>
        <div class="card-footer d-flex flex-column flex-md-row justify-content-between align-items-center">
          <button type="button" class="btn btn-primary mb-2 mb-md-0" id="addUserBtn">
            <i class="fa-regular fa-plus"></i>
          </button>
          <div class="d-flex flex-column flex-md-row align-items-center">
            <div class="me-3 mb-2 mb-md-0 text-center text-md-start" id="paginationInfo"></div>
            <nav aria-label="Page navigation">
              <ul class="pagination mb-0 justify-content-center justify-content-md-start" id="pagination">
                <!-- Pagination items will be inserted here -->
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="userModalLabel">User Form</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="userForm">
          <div class="modal-body">
            <div id="formModalContent">
              <div class="row mb-3">
                <div class="col-12 col-md-4 col-lg-3 align-self-center">
                  <label for="nameFormModal">Name</label>
                </div>
                <div class="col-12 col-md-8 col-lg-9 align-self-center">
                  <input type="text" class="form-control" name="name" id="nameFormModal" placeholder="Insert your name"
                    autocomplete="off" />
                </div>
              </div>
              <div class="row mb-3">
                <div class="col-12 col-md-4 col-lg-3 align-self-center">
                  <label for="phoneFormModal">Phone</label>
                </div>
                <div class="col-12 col-md-8 col-lg-9 align-self-center">
                  <input type="text" class="form-control" name="phone" id="phoneFormModal"
                    placeholder="Insert your phone" autocomplete="off" />
                </div>
              </div>
            </div>
            <div class="modal-body p-0" id="deleteContent">
              <p class="mb-0">Are you sure you want to delete '<span id="deleteItemName"></span>'?</p>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            <button type="submit" class="btn btn-primary" id="saveButton">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let users = [];
      let currentPage = 1;
      let limit = 5;
      let search = '';
      let sortBy = '_id';
      let sortMode = 'desc';
      let userId = '';
      let formMode = 'add';

      const userTableBody = document.getElementById('userTableBody');
      const pagination = document.getElementById('pagination');
      const paginationInfo = document.getElementById('paginationInfo');
      const userModal = new bootstrap.Modal(document.getElementById('userModal'));
      const userForm = document.getElementById('userForm');
      const nameFormModal = document.getElementById('nameFormModal');
      const phoneFormModal = document.getElementById('phoneFormModal');
      const formModalContent = document.getElementById('formModalContent');
      const deleteContent = document.getElementById('deleteContent');
      const saveButton = document.getElementById('saveButton');
      const limitSelect = document.getElementById('limit');

      window.showModal = (mode, id = '', name = '', phone = '') => {
        userId = id;
        formMode = mode;
        if (formMode === 'add') {
          userModalLabel.textContent = 'Add User';
          formModalContent.style.display = 'block';
          nameFormModal.value = '';
          phoneFormModal.value = '';
          deleteContent.style.display = 'none';
          saveButton.textContent = 'Save';
        } else if (formMode === 'edit') {
          userModalLabel.textContent = 'Edit User';
          deleteContent.style.display = 'none';
          nameFormModal.value = name;
          phoneFormModal.value = phone;
          saveButton.textContent = 'Save changes';
        } else if (formMode === 'delete') {
          userModalLabel.textContent = 'Delete User';
          deleteContent.style.display = 'block';
          formModalContent.style.display = 'none';
          deleteItemName.textContent = name;
          saveButton.textContent = 'Delete';
        }
        userModal.show();
      };

      const fetchUsers = async () => {
        let fetchUrl = `/users?page=${currentPage}&limit=${limit}&search=${search}&sortBy=${sortBy}&sortMode=${sortMode}`;
        console.log(fetchUrl);
        const response = await fetch(fetchUrl);
        const data = await response.json();
        console.log(data);

        if (data.data && Array.isArray(data.data)) {
          users = data.data;
          renderUsers(data.total);
        } else {
          console.error('Unexpected data format:', data);
        }
      };

      const renderUsers = (total) => {
        userTableBody.innerHTML = '';
        const offset = (currentPage - 1) * limit;
        users.forEach((user, index) => {
          const row = document.createElement('tr');
          row.innerHTML = `
          <td class="col-1 align-middle px-2">${offset + index + 1}</td>
          <td class="col-4 col-md-3 align-middle px-2">${user.name}</td>
          <td class="col-4 col-md-3 align-middle px-2">${user.phone}</td>
          <td class="col-3 align-middle px-2">
            <div class="d-flex justify-content-start">
              <div class="m-1">
                <button type="button" class="btn btn-success" onclick="showModal('edit', '${user._id}', '${user.name}', '${user.phone}')">
                  <i class="fa-solid fa-pen"></i>
                </button>
              </div>
              <div class="m-1">
                <button type="button" class="btn btn-danger" onclick="showModal('delete', '${user._id}', '${user.name}')">
                  <i class="fa-solid fa-trash"></i>
                </button>
              </div>
              <div class="m-1">
                <a class="btn btn-warning" href="/users/${user._id}/todos" role="button">
                  <i class="fa-solid fa-right-to-bracket"></i>
                </a>
              </div>
            </div>
          </td>
        `;
          userTableBody.appendChild(row);
        });

        if (limit !== 0) {
          renderPagination(total);
        } else {
          pagination.innerHTML = '';
          paginationInfo.textContent = `Showing all ${total} entries`;
        }
      };

      const renderPagination = (total) => {
        const pages = Math.ceil(total / limit);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';  // Reset pagination items
        paginationInfo.textContent = `Showing ${Math.min((currentPage - 1) * limit + 1, total)} to ${Math.min(currentPage * limit, total)} of ${total} entries`;

        if (pages > 1) {
          // Previous Button
          const prevItem = document.createElement('li');
          prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
          prevItem.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
          prevItem.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage > 1) {
              currentPage--;
              fetchUsers();
            }
          });
          pagination.appendChild(prevItem);

          // First Page
          const firstPage = document.createElement('li');
          firstPage.className = `page-item ${currentPage === 1 ? 'active' : ''}`;
          firstPage.innerHTML = `<a class="page-link" href="#">1</a>`;
          firstPage.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage = 1;
            fetchUsers();
          });
          pagination.appendChild(firstPage);

          // Ellipsis before
          if (currentPage > 3) {
            const ellipsisBefore = document.createElement('li');
            ellipsisBefore.className = 'page-item disabled';
            ellipsisBefore.innerHTML = `<span class="page-link">...</span>`;
            pagination.appendChild(ellipsisBefore);
          }

          // Pages around current page (max 3 pages)
          for (let i = Math.max(2, currentPage - 1); i <= Math.min(pages - 1, currentPage + 1); i++) {
            const pageItem = document.createElement('li');
            pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            pageItem.addEventListener('click', (e) => {
              e.preventDefault();
              currentPage = i;
              fetchUsers();
            });
            pagination.appendChild(pageItem);
          }

          // Ellipsis after
          if (currentPage < pages - 2) {
            const ellipsisAfter = document.createElement('li');
            ellipsisAfter.className = 'page-item disabled';
            ellipsisAfter.innerHTML = `<span class="page-link">...</span>`;
            pagination.appendChild(ellipsisAfter);
          }

          // Last Page
          const lastPage = document.createElement('li');
          lastPage.className = `page-item ${currentPage === pages ? 'active' : ''}`;
          lastPage.innerHTML = `<a class="page-link" href="#">${pages}</a>`;
          lastPage.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage = pages;
            fetchUsers();
          });
          pagination.appendChild(lastPage);

          // Next Button
          const nextItem = document.createElement('li');
          nextItem.className = `page-item ${currentPage === pages ? 'disabled' : ''}`;
          nextItem.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
          nextItem.addEventListener('click', (e) => {
            e.preventDefault();
            if (currentPage < pages) {
              currentPage++;
              fetchUsers();
            }
          });
          pagination.appendChild(nextItem);
        }
      };

      userForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(userForm);
        const userData = Object.fromEntries(formData.entries());
        userFormUrl = '/users';
        method = 'POST';
        headers = { 'Content-Type': 'application/json' };
        if (formMode === 'edit') {
          userFormUrl = `/users/${userId}`;
          method = 'PUT';
        }
        if (formMode === 'delete') {
          userFormUrl = `/users/${userId}`;
          method = 'DELETE';
          headers = {};
        }
        const response = await fetch(userFormUrl, {
          method,
          headers,
          body: method !== 'DELETE' ? JSON.stringify(userData) : null
        });
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Something went wrong');
        }

        userModal.hide();
        fetchUsers();
      });

      document.getElementById('addUserBtn').addEventListener('click', () => showModal('add'));
      document.getElementById('searchBtn').addEventListener('click', () => {
        search = document.getElementById('search').value;
        fetchUsers();
      });
      document.getElementById('resetBtn').addEventListener('click', () => {
        currentPage = 1;
        limit = 5;
        search = '';
        if (sortBy !== '_id') {
          sortBy = '_id';
          sortMode = 'desc';
          document.getElementById('sortName').innerHTML = `<i class="fa-solid fa-sort me-2"></i>Name`;
          document.getElementById('sortPhone').innerHTML = `<i class="fa-solid fa-sort me-2"></i>Phone`;
        }
        document.getElementById('search').value = '';
        limitSelect.value = '5';
        fetchUsers();
      });
      limitSelect.addEventListener('change', (e) => {
        limit = parseInt(e.target.value);
        fetchUsers();
      });
      document.getElementById('sortName').addEventListener('click', () => {
        sortBy = 'name';
        sortMode = sortMode === 'asc' ? 'desc' : 'asc';
        if (sortMode === 'asc') {
          document.getElementById('sortName').innerHTML = `<i class="fa-solid fa-sort-asc me-2"></i>Name`;
        } else {
          document.getElementById('sortName').innerHTML = `<i class="fa-solid fa-sort-desc me-2"></i>Name`;
        }
        fetchUsers();
      });
      document.getElementById('sortPhone').addEventListener('click', () => {
        sortBy = 'phone';
        sortMode = sortMode === 'asc' ? 'desc' : 'asc';
        if (sortMode === 'asc') {
          document.getElementById('sortPhone').innerHTML = `<i class="fa-solid fa-sort-asc me-2"></i>Phone`;
        } else {
          document.getElementById('sortPhone').innerHTML = `<i class="fa-solid fa-sort-desc me-2"></i>Phone`;
        }
        fetchUsers();
      });

      fetchUsers();
    });
  </script>
  <%- include('partials/footer') %>